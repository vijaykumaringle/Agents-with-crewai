#!/usr/bin/env python3
"""
Entry point for running the Cipher agent with CrewAI.
"""

import os
import datetime
from dotenv import load_dotenv
from crewai import Crew
from crewai import LLM
from cipher_agent import CipherAgent

# Load environment variables
load_dotenv()

def save_result_to_md(result, task_name="Analyze Google Reviews"):
    """Save the result to a markdown file with timestamp."""
    # Create results directory if it doesn't exist
    os.makedirs("results", exist_ok=True)
    
    # Generate timestamp for filename
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"results/cipher_agent_result_{timestamp}.md"
    
    # Create markdown content
    md_content = f"""# Cipher by Vijaykumar Analysis Report

**Generated:** {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**Task:** {task_name}
**Model:** Gemini 2.5 Flash

## Analysis Results

{result}

## Agent Details

- **Agent Type:** Cipher by Vijaykumar (Business Review Analyst)
- **Role:** Analyze Google reviews to extract insights and generate business improvement recommendations
- **Capabilities:** 
  - Fetch Google reviews
  - Perform sentiment analysis
  - Extract pros and cons
  - Generate improvement plans

---
*Report generated by Cipher by Vijaykumar using Agentic AI*
"""
    
    # Write to file
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(md_content)
    
    return filename

def main():
    # Initialize Gemini LLM
    llm = LLM(
        model="gemini/gemini-2.5-flash",
        api_key=os.getenv("GOOGLE_API_KEY")
    )
    
    # Create the Cipher agent with Gemini LLM
    agent = CipherAgent(llm=llm)
    
    # Create a simple task
    task = {
        "name": "Analyze Google Reviews",
        "description": "Fetch and analyze Google reviews for a business",
        "agent": agent,
        "expected_output": "A comprehensive analysis report with sentiment scores, pros/cons, and improvement recommendations"
    }
    
    # Create and run the crew
    crew = Crew(
        agents=[agent],
        tasks=[task],
        llm=llm
    )
    
    try:
        result = crew.kickoff()
        print("Crew execution completed!")
        print(f"Result: {result}")
        
        # Save result to markdown file
        filename = save_result_to_md(result, task["name"])
        print(f"\n‚úÖ Report saved to: {filename}")
        
    except Exception as e:
        error_msg = f"Error during execution: {str(e)}"
        print(f"‚ùå {error_msg}")
        
        # Save error to markdown file
        filename = save_result_to_md(error_msg, "Error Report")
        print(f"üìù Error report saved to: {filename}")

if __name__ == "__main__":
    main() 